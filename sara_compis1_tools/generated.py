from sara_compis1_tools.StateAFD import StateAFD
from sara_compis1_tools.lexEval import LexEval
from sara_compis1_tools.Error import Error
import sys

mega = [StateAFD(name='init',transitions={'ε': 'A'},accepting=False,start=True, value=None),StateAFD(name='A',transitions={'p': 'B'},accepting=False,start=False, value=None),StateAFD(name='B',transitions={'r': 'C'},accepting=False,start=False, value=None),StateAFD(name='C',transitions={'i': 'D'},accepting=False,start=False, value=None),StateAFD(name='D',transitions={'n': 'E'},accepting=False,start=False, value=None),StateAFD(name='E',transitions={'t': 'F'},accepting=False,start=False, value=None),StateAFD(name='F',transitions={},accepting=True,start=False, value='printStatement'),StateAFD(name='init',transitions={'ε': 'G'},accepting=False,start=True, value=None),StateAFD(name='G',transitions={' ': 'H', '\t': 'H', '\n': 'H'},accepting=False,start=False, value=None),StateAFD(name='H',transitions={' ': 'H', '\t': 'H', '\n': 'H'},accepting=True,start=False, value=''),StateAFD(name='init',transitions={'ε': 'I'},accepting=False,start=True, value=None),StateAFD(name='I',transitions={'a': 'J', 'b': 'J', 'c': 'J', 'd': 'J', 'e': 'J', 'f': 'J', 'g': 'J', 'h': 'J', 'i': 'J', 'j': 'J', 'A': 'J', 'B': 'J', 'C': 'J', 'D': 'J', 'E': 'J', 'F': 'J', 'G': 'J', 'H': 'J', 'I': 'J', 'J': 'J', '_': 'J'},accepting=False,start=False, value=None),StateAFD(name='J',transitions={'a': 'J', 'b': 'J', 'c': 'J', 'd': 'J', 'e': 'J', 'f': 'J', 'g': 'J', 'h': 'J', 'i': 'J', 'j': 'J', 'A': 'J', 'B': 'J', 'C': 'J', 'D': 'J', 'E': 'J', 'F': 'J', 'G': 'J', 'H': 'J', 'I': 'J', 'J': 'J', '_': 'J', '0': 'K', '1': 'K', '2': 'K', '3': 'K', '4': 'K', '5': 'K', '6': 'K', '7': 'K', '8': 'K', '9': 'K'},accepting=False,start=False, value=None),StateAFD(name='K',transitions={'0': 'K', '1': 'K', '2': 'K', '3': 'K', '4': 'K', '5': 'K', '6': 'K', '7': 'K', '8': 'K', '9': 'K'},accepting=True,start=False, value='id'),StateAFD(name='init',transitions={'ε': 'L'},accepting=False,start=True, value=None),StateAFD(name='L',transitions={'"': 'M'},accepting=False,start=False, value=None),StateAFD(name='M',transitions={'a': 'N', 'b': 'N', 'c': 'N', 'd': 'N', 'e': 'N', 'f': 'N', 'g': 'N', 'h': 'N', 'i': 'N', 'j': 'N', 'k': 'N', 'l': 'N', 'm': 'N', 'n': 'N', 'o': 'N', 'p': 'N', 'q': 'N', 'r': 'N', 's': 'N', 't': 'N', 'u': 'N', 'v': 'N', 'w': 'N', 'x': 'N', 'y': 'N', 'z': 'N', 'A': 'N', 'B': 'N', 'C': 'N', 'D': 'N', 'E': 'N', 'F': 'N', 'G': 'N', 'H': 'N', 'I': 'N', 'J': 'N', 'K': 'N', 'L': 'N', 'M': 'N', 'N': 'N', 'O': 'N', 'P': 'N', 'Q': 'N', 'R': 'N', 'S': 'N', 'T': 'N', 'U': 'N', 'V': 'N', 'W': 'N', 'X': 'N', 'Y': 'N', 'Z': 'N', '0': 'N', '1': 'N', '2': 'N', '3': 'N', '4': 'N', '5': 'N', '6': 'N', '7': 'N', '8': 'N', '9': 'N', ' ': 'N'},accepting=False,start=False, value=None),StateAFD(name='N',transitions={'"': 'O', 'a': 'N', 'b': 'N', 'c': 'N', 'd': 'N', 'e': 'N', 'f': 'N', 'g': 'N', 'h': 'N', 'i': 'N', 'j': 'N', 'k': 'N', 'l': 'N', 'm': 'N', 'n': 'N', 'o': 'N', 'p': 'N', 'q': 'N', 'r': 'N', 's': 'N', 't': 'N', 'u': 'N', 'v': 'N', 'w': 'N', 'x': 'N', 'y': 'N', 'z': 'N', 'A': 'N', 'B': 'N', 'C': 'N', 'D': 'N', 'E': 'N', 'F': 'N', 'G': 'N', 'H': 'N', 'I': 'N', 'J': 'N', 'K': 'N', 'L': 'N', 'M': 'N', 'N': 'N', 'O': 'N', 'P': 'N', 'Q': 'N', 'R': 'N', 'S': 'N', 'T': 'N', 'U': 'N', 'V': 'N', 'W': 'N', 'X': 'N', 'Y': 'N', 'Z': 'N', '0': 'N', '1': 'N', '2': 'N', '3': 'N', '4': 'N', '5': 'N', '6': 'N', '7': 'N', '8': 'N', '9': 'N', ' ': 'N'},accepting=False,start=False, value=None),StateAFD(name='O',transitions={},accepting=True,start=False, value='cadena'),StateAFD(name='init',transitions={'ε': 'P'},accepting=False,start=True, value=None),StateAFD(name='P',transitions={'0': 'Q', '1': 'Q', '2': 'Q', '3': 'Q', '4': 'Q', '5': 'Q', '6': 'Q', '7': 'Q', '8': 'Q', '9': 'Q'},accepting=False,start=False, value=None),StateAFD(name='Q',transitions={'0': 'Q', '1': 'Q', '2': 'Q', '3': 'Q', '4': 'Q', '5': 'Q', '6': 'Q', '7': 'Q', '8': 'Q', '9': 'Q'},accepting=True,start=False, value='enteros'),StateAFD(name='init',transitions={'ε': 'R'},accepting=False,start=True, value=None),StateAFD(name='R',transitions={'+': 'S'},accepting=False,start=False, value=None),StateAFD(name='S',transitions={},accepting=True,start=False, value='+'),StateAFD(name='init',transitions={'ε': 'T'},accepting=False,start=True, value=None),StateAFD(name='T',transitions={'(': 'U'},accepting=False,start=False, value=None),StateAFD(name='U',transitions={},accepting=True,start=False, value='('),StateAFD(name='init',transitions={'ε': 'V'},accepting=False,start=True, value=None),StateAFD(name='V',transitions={')': 'W'},accepting=False,start=False, value=None),StateAFD(name='W',transitions={},accepting=True,start=False, value=')'),StateAFD(name='init',transitions={'ε': 'X'},accepting=False,start=True, value=None),StateAFD(name='X',transitions={'*': 'Y'},accepting=False,start=False, value=None),StateAFD(name='Y',transitions={},accepting=True,start=False, value='*')]
errors = set()

class Generated:
	def return_tokens(self):
		return ['printStatement','espacioEnBlanco','id','cadena','enteros','+','(',')','*']

	def parse(self, test_file):
		lex = LexEval(test_file)
		return lex.evaluate(mega, errors)
